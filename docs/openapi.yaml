openapi: 3.0.3
info:
  title: Eldorg API
  version: 1.0.0
  description: |
    API documentation for the Eldorg Spring Boot MVP project using Clean Architecture.
    All endpoints are prefixed with `/api/v1`.
servers:
  - url: http://localhost:8080/api/v1
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  example: pass123
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
                  status:
                    type: integer
                    example: 200
  /auth/login:
    post:
      summary: Login and receive JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  example: pass123
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
                  status:
                    type: integer
                    example: 200
  /auth/refresh-token:
    post:
      summary: Get a new JWT using a refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
                  status:
                    type: integer
                    example: 200
  /auth/logout:
    post:
      summary: Logout and revoke refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6...
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    nullable: true
                    example: null
                  status:
                    type: integer
                    example: 200
  /scripts:
    get:
      summary: Get all approved scripts
      responses:
        '200':
          description: List of approved scripts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScriptDTO'
                  status:
                    type: integer
                    example: 200
  /scripts/{id}:
    get:
      summary: Get approved script by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Script details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ScriptDTO'
                  status:
                    type: integer
                    example: 200
components:
  schemas:
    ScriptDTO:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Script 1
        status:
          type: string
          example: APPROVED

